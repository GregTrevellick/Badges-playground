

http://fabiospampinato.com/autogit/#install
https://github.com/fabiospampinato/autogit-command-github-sync
https://github.com/fabiospampinato/autogit-command-github-publish

 








project settings > pipelines > service connections

pipeline > build > edit > getsources >










convert to node app for debugging => unit tests (jest?) (else get rid of karma packages)


YES greenkeeper [](https://badges.greenkeeper.io/GregTrevellick/OpenInApp.Launcher.svg)](https://greenkeeper.io/)  
   Greenkeeper will open an Initial Pull Request to update all dependencies at once
   It will add the Greenkeeper badge to your projectâ€™s readme.md
   The initial PR will not be opened if all dependencies are already up to date and the readme.md already has a badge (in this case Greenkeeper is silently enabled)

YES codecov (need to add yaml file) https://codecov.io/gh 
   https://github.com/codecov/example-csharp
   https://github.com/codecov/example-typescript



Low priority in future
======================
DONE codebeat (JS & TS only, free for oss) https://github.com/marketplace/codebeat
DONE lgtm (JS & TS only, free for oss) https://github.com/marketplace/lgtm
MAYBE deepsource https://github.com/marketplace/deepsource-io (create a .deepsource.toml file in your repository's root folder)
MAYBE synk vulnerability scanner https://app.snyk.io/org/gregtrevellick-github-marketplace/project/27329e5b-74ce-4aae-a407-e1382fba7ef0 (have created an account)
YES browser stack (testing, free for oss) https://www.browserstack.com/open-source?ref=pricing
YES codeclimate (for non-c# repos) https://codeclimate.com/
YES crowdin (need resx files) https://crowdin.com/project/GregTrevellickVisualStudioMarketplaceMetrics/settings#badges Badges will appear when there is progress in your project
YES testquality (free for oss) https://github.com/marketplace/testquality
NAH buddy (free, but for usage not for oss) https://github.com/marketplace/buddy
NAH circleci (linux CI, free for oss) https://circleci.com/pricing/ https://github.com/marketplace/circleci
NAH code inspector (javascript, typescript only) https://github.com/marketplace/code-inspector https://frontend.code-inspector.com/project/5083/dashboard https://doc.code-inspector.com/docs/add-badge/
NAH codeship (ci, not free) https://codeship.com/pricing
NAH coveralls (bit complicated for now) https://www.nuget.org/packages/coveralls.io https://github.com/csmacnz/coveralls.net
NAH coverity (depends on travis working) https://docs.travis-ci.com/user/coverity-scan/
NAH dependabot (erroneously says i haven't got a .csproj file in repos) https://app.dependabot.com/accounts/GregTrevellick/repos
NAH gitlocalize (free for 1 oss repo only) https://github.com/marketplace/gitlocalize
NAH google cloud build (120 free build minutes a day, $0.003/minute after that) https://github.com/marketplace/google-cloud-build
NAH scrutinizer-ci (javascript, typescript only) code quality tool (have created an account)
NAH semaphore (linux CI, free for oss) https://semaphoreci.com/pricing https://github.com/marketplace/semaphore
NAH snyk (free but aimed at node) https://github.com/marketplace/snyk
NAH travis (fails mono build using msbuild or xbuild - see SolutionOpenPopUp repo) https://travis-ci.org/GregTrevellick/FilesForEveryExtensionCreator
NAH works for angular but not .net https://github.com/marketplace/percy https://percy.io/Moi/AutoFindReplace






NET CORE UPGRADEs (GitHub actions)
==================================
1 - Convert packages.config to PackageReference format with the conversion tool in Visual Studio (https://docs.microsoft.com/en-us/nuget/consume-packages/migrate-packages-config-to-package-reference) > right-click on the References node or the packages.config file > "Migrate packages.config to PackageReference...." (https://docs.microsoft.com/en-us/dotnet/core/porting/)
2 - Analyse compatibility as follows: (https://docs.microsoft.com/en-us/dotnet/core/porting/)
    a - [One-off] Install this vsix https://docs.microsoft.com/en-us/dotnet/standard/analyzers/portability-analyzer
    b - VS2019 > Tools > Options (or Analyze > Portability Analyzer Settings) > select Target Platforms (use net standard for class libs / net core for applications)
    c - Open .sln in VS2019 > Right-click project > Analyze Assembly Portability (or Analyze > Analyze Assembly Portability) > select project's executable or DLL
3 - Convert projects (https://docs.microsoft.com/en-us/dotnet/core/porting/)
    a - [One-off] Cmd > dotnet tool install -g try-convert (https://github.com/dotnet/try-convert)
    b - Cmd [VS developer command prompt] > cd D:\_Dgit\_MINE_ACTIVE\OpenInApp.Launcher\src\OpenInApp.Command > try-convert (this will create a .csproj.old file & the new format .csproj file)
    c - To run try-convert for an entire sln rather than for each csproj one by one in powershell > 
            cd D:\_Dgit\_MINE_ACTIVE\OpenInApp.Launcher\src     
            $paths = Get-ChildItem -include *.csproj -Recurse
            foreach($pathobject in $paths) 
            {
                cd $pathobject.directory.fullName        
                try-convert
            }
    d - For the conversion error "Project '..\OpenInApp.Command\OpenInApp.Command.csproj' targets 'netcoreapp3.1'. It cannot be referenced by a project that targets '.NETFramework,Version=v4.6.1'" ==> change <TargetFramework>netcoreapp3.1</TargetFramework> to <TargetFramework>netstandard2.0</TargetFramework>
    e - For the conversion error "The imported project "C:\Program Files\dotnet\sdk\3.1.200\Microsoft\VisualStudio\v16.0\VSSDK\Microsoft.VsSDK.targets" was not found. Confirm that...the file exists on disk." ==> Simply re-try the conversion in the VS developer command prompt window rather than the standard windows command prompt
    f - For the compile error "This project has custom imports in a manner that's not supported" ==> Edit the csproj & comment out this line <!--<Import Project="$(VSToolsPath)\VSSDK\Microsoft.VsSDK.targets" Condition="'$(VSToolsPath)' != ''" />-->
https://docs.microsoft.com/en-us/dotnet/core/porting/
https://www.danielcrabtree.com/blog/314/upgrading-to-net-core-and-net-standard-made-easy
https://arminreiter.com/2017/05/port-net-framework-net-standard/
https://docs.microsoft.com/en-us/aspnet/core/migration/proper-to-2x/?view=aspnetcore-3.1
https://docs.microsoft.com/en-us/dotnet/core/compatibility/fx-core
